#include <vector>

using namespace std;

struct eqstr
{
  bool operator()(const char* s1, const char* s2) const
  {
    return strcmp(s1, s2) == 0;
  }
};

vector<char*>* split(char* s,char c);

void diff(double *a,double* b,double* c);
double dot(double *a,double* b);
double angle(double* a,double* b,double* c);

void print_mat(double *mat,int N);
void print_vec(double *vec,int N);

//----------------------------------------------------------

class Atom
{
 public:
  int anum;
  char anam[4+1]; // e.g. " CA "
  char alt; // usually ' '
  char rnam[3+1]; // NULL-terminated
  int rnum;
  char chn; // might be ' '
  double co[3],occ,bfact;
  double dsq; // for KDTree

  Atom(char* buf);
  Atom(float x,float y,float z); // just coords
  // copy exactly n chars, then add NULL
  void copy_str(char* src,char* dest,int n);
  char* id();
  void print();
};

vector<Atom*>* read_pdb(char* fname);
void print_pdb(int anum,char* anam,int rnum,char* rnam,char chn,double* co,float occ,float bfact);

// special case for ligand files generated by QMD
// separated by END records
// return list of chains

vector<vector<Atom*>*>* read_conformers(char* fname);
vector<char*>* read_frames(char* fname);

int nucleic(Atom* a);

//---------------------------------

class Match
{
 public:
  int i,j,k; // indexes into prot resnums
  int conf;
  float rms;
  float angle;
  float score;
  double rot[9];
  double cen1[3],cen2[3];
  void transform(double* A,double* B); // B=rot.(A-cen1)+cen2
};

bool match_compare(const Match* a,const Match* b);

// global variables, weights for score, defaults defined in triplet_lib.cpp
extern float Wang,Wdist;

Match* compare_3vecs(vector<Atom*>& a,vector<Atom*>& b);

//------------------------------------------------------------

class KDTree
{
 public:
  int dim;
  int cutpt; // index into atoms
  double val; // value of cutput in dimension dim for splitting
  vector<Atom*>* atoms;
  KDTree* left; // dim<=val
  KDTree* right; // dim>val
  vector<Atom*> leftatoms;
  vector<Atom*> rightatoms;

  KDTree(vector<Atom*>* A);
  ~KDTree();
  // uses dsq member of Atom record for convenient storate of dist^2 to target
  Atom* nearest(Atom* target,int depth,double best_dsq_so_far);
};

//----------------------------------------------------------------------

// global variables, defaults defined in triplet_lib.cpp
extern float CONTACT,POINTING;

vector<int>* interface_residues(vector<Atom*>& chain1,vector<Atom*>& chain2);

